
package controller;

import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.servlet.http.Part;

import dao.CursoDAO;
import dao.EgressoDAO;
import entity.Aluno;
import entity.Curso;
import entity.Egresso;
import util.ImportadorPlanilha;
import util.SessionUtil;

/**
 * Bean responsavel pelo importe da tabela do aluno tabela segue o padrao de
 * nome sobrenome email fone forma de egesso sexo data de nascimento
 */

@ManagedBean
public class BeanImporte implements Serializable {

	private static final long serialVersionUID = -1444346246481592558L;
	// CONSTANTES
	// **************************************************
	private static final Integer MAX_ANO_EXIBE = 2020;// read-only
	private static final Integer MIN_ANO_EXIBE = 2017;// read-only
	private static final String INF = "blue";
	private static final String DANGER = "red";
	private static final String SUCCESS = "green";
	private static final String ICONSUCCESS = "done_all";
	private static final String ICONINF = "info";
	private static final String ICONDANGER = "error_outline";
	// **************************************************
	private Part arquivo;
	private String idDocurso = new String(); // retornara o id do curso
												// selecionado no combo box
	private List<Egresso> egressoLis = new ArrayList<>();
	private Curso curso = new Curso();
	private CursoDAO cD = new CursoDAO();
	private Integer ano;
	private Integer fase;
	private String msg_erro = new String(); // read-only
	private String msg_color = new String(); // read-only
	private String msg_icon = new String(); // read-only
	// **************************************************


	// ********************************************************v
	/*
	 * MODO DE VISUALIZACAO DA LISTA DE ALUNOS DO EGRESSO IMPORTADO
	 */
		public String showTableLits(Integer idCurso) {
			//Para guardar na session
			SessionUtil.setParam("IDCURSO",idCurso );
			return "indexListarEgresso?faces-redirect=true";
		}
		// ********************************************************v
		/*
		 * MODO DE ADICAO, ADICIONA UM ALUNO AO EGRESSO CLICADO
		 */
		public String showTableAdd(Integer Curso ){
			//Para guardar na session
			SessionUtil.setParam("IDCURSOADICAO",Curso );
			return "indexCadastroAluno?faces-redirect=true";
		}
		
	
	// **************************************************
	// IMPORTE DOS DADOS COM VALIDACAO
	public String importe() {


		// just valadation
		if (this.fase == 0) {
			this.msg_erro = "Opss, quantas fases possui o curso a qual estás importando a  tabela?";
			this.msg_color = INF;
			this.msg_icon = ICONINF;
			return null;
		}
		if (this.fase == 0) {
			this.msg_erro = "Opss, diga-nos em que ano estamos por favor?";
			this.msg_color = INF;
			this.msg_icon = ICONINF;
			return null;
		}
		if (this.idDocurso.isEmpty()) {
			this.msg_erro = "Opss, a qual o curso pertence este importe?";
			this.msg_color = INF;
			this.msg_icon = ICONINF;
			return null;

		}

		// here all ok
		// start importe
		return this.uploadArquivo();

	}

	// *******************************************************************************
	// LISTA DE EGRESSO CADASTRADO NO BANCO
	// *******************************************************************************
	public List<Egresso> getEgressoLis() {
		EgressoDAO egDAO = new EgressoDAO();
		this.egressoLis = egDAO.readAllEgresso();
		return egressoLis;
	}

	// Generated by ANO
	// *******************************************************************************
	private static Map<Integer, Integer> anoValue;
	static {
		anoValue = new LinkedHashMap<>();
		for (int i = MIN_ANO_EXIBE; i <= MAX_ANO_EXIBE; i++) {
			anoValue.put(i, i);
		}
	}

	public Map<Integer, Integer> getAnoValue() {
		return anoValue;
	}

	// **************************************************
	// GETT AND SETTERs
	public List<Curso> getListaCurso() {
		return cD.readAllCurso();
	}

	public Integer getAno() {
		return ano;
	}

	public void setAno(Integer ano) {
		this.ano = ano;
	}

	public Curso getCurso() {
		return curso;
	}

	public void setCurso(Curso curso) {
		this.curso = curso;
	}

	public Integer getFase() {
		return fase;
	}

	public void setFase(Integer fase) {
		this.fase = fase;
	}

	public String getMsg_erro() {
		return msg_erro;
	}

	public String getMsg_color() {
		return msg_color;
	}

	public String getMsg_icon() {
		return msg_icon;
	}

	public Part getArquivo() {
		return arquivo;

	}

	public void setArquivo(Part arquivo) {
		this.arquivo = arquivo;
	}

	public String getIdDocurso() {
		return idDocurso;
	}

	public void setIdDocurso(String idDocurso) {
		this.idDocurso = idDocurso;
	}

	// **************************************************
	// PRIVATE METHODS
	// **************************************************
	public String uploadArquivo() {

		InputStream inputStreamArquivo = null;
		
		// CONFERE ANTES MESMO DE ENVIAR SE EGRESSO JA NAO EXISTE
		// SOMENTE EXISTIRA UM EGRESSO PARA CADA IMPORTE
		// **********************************************************************
		EgressoDAO egD = new EgressoDAO();
		System.out.println("CONFERE SE O ID "+ idDocurso ) ;
		if (egD.CheckByAnoFaseCurso(Integer.parseInt(this.idDocurso), this.ano, this.fase) > 0) {
			this.msg_color = INF;
			this.msg_icon = ICONINF;
			this.msg_erro = "Opss, Ja existe uma importação para este curso: com o mesmo ANO e"
					+ this.ano + " Fase " + this.fase + ""
					+ "\nCaso queira incluir um aluno clique no egresso abaixo desejado e inclua o aluno, individualmente.";
			return null;
		}
		// ************************************************************************


		try {
			// buscando o curso para envio ao importe

			this.curso = cD.readAllDataCursoById(Integer.parseInt(this.idDocurso));
			if (this.curso == null) {
				this.msg_color = DANGER;
				this.msg_icon = ICONDANGER;
				this.msg_erro = "Opss, falha nossa por favor tente mais tarde. ";
				return null;
			}

			System.out.println("Curso a ser importado eh " + this.curso);
			inputStreamArquivo = arquivo.getInputStream();

			ImportadorPlanilha importador = new ImportadorPlanilha();

			// importa os dados basicos do alunos junto com o curso já pré
			// cadastrado no banco de dados

			boolean ok = importador.importar(inputStreamArquivo, this.curso, this.fase, this.ano);

			if (ok) {
				this.msg_color = SUCCESS;
				this.msg_icon = ICONSUCCESS;
				this.msg_erro = "OPa, o importe do curso [ " + this.curso.getNome_curso()
						+ " ] foi feito com sucesso !";

			} else {
				this.msg_color = DANGER;
				this.msg_icon = ICONDANGER;
				this.msg_erro = "OPss, não foi possivel faze o importe, tente mais tarde !";

			}

		} catch (IOException e) {
			e.printStackTrace();
		}

		return null;

	}

}
